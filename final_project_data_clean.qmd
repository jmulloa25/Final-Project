---
title: "PS5 Andy Fan Will Sigal"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---


```{python}
### SETUP 
import pandas as pd
import altair as alt
import time
import os
import warnings
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')
import requests
from bs4 import BeautifulSoup
import concurrent.futures

### SETTING WD
#os.chdir('d:\\UChicago\\Classes\\2024Qfall\\Programming Python\\Final-Project\\Data') #andy wd
# os.chdir("C:\Users\jmull\Downloads\ACLED_2017-2024-Q1-QTA.csv")  #juan wd
os.chdir("/Users/willsigal/Desktop/UChicago/Fall 2025/Python Final")   #will wd

```
Just put your directory in the top line of each chunk when needed, and then make all other wds comments each time you work on yours

## code for cleaning World Bank Development Indicator (Andy)

```{python}
wbcm = pd.read_csv('central_america_data_combined.csv', header=None, skiprows=4)

# remove empty space, set header, remove years before 2000, and empty variables
wbcm.columns = wbcm.iloc[0]
wbcm = wbcm[1:].reset_index(drop=True)
wbcm = wbcm.drop(wbcm.columns[4:44], axis=1)


wbcm = wbcm.loc[~wbcm.iloc[:, 4:].isna().all(axis=1)] # only drops columns that are fully empty--basically a less harsh dropna


# melting
wbcm_melt = wbcm.melt(id_vars=['Country Name','Country Code','Indicator Name','Indicator Code'], var_name='Year', value_name='Value')
wbcm_melt = wbcm_melt.drop('Indicator Code', axis=1)

# pivot
wbcm_pv = wbcm_melt.pivot_table(index=['Country Name', 'Year'], columns='Indicator Name', values='Value', aggfunc='first').reset_index()
# save cleaned
#wbcm_pv.to_csv("central_america_data_cleaned.csv", index=False)
```

```{python}
wbcm_pv.head()
```

wbcm_columns = ['Population growth (annual %)', 'Intentional homicides, female (per 100,000 female)', 'Merchandise imports by the reporting economy (current US$)','Commercial service imports (current US$)', etc...]

variables we are considering are the categroies surrounding: 
employment, debt, tax, expenditures (education, public services, infrastructure, health), life exp. birth and death rates.

## code for cleaning World Bank Development Inidcators (Kaggle) (Andy)

```{python}
wbdi = pd.read_csv('world_bank_development_indicators.csv')

# subset to central american countries, and post 2000
countries_list = ['Belize', 'Costa Rica', 'El Salvador', 'Guatemala', 'Honduras', 'Mexico', 'Nicaragua', 'Panama']
wbdi_CA = wbdi[wbdi['country'].isin(countries_list)]

wbdi_CA['date'] = pd.to_datetime(wbdi_CA['date'])
wbdi_CA = wbdi_CA[wbdi_CA['date'] > '2000-01-01']

# save cleaned
#wbdi_CA.to_csv("world_bank_development_indicators_cleaned.csv", index=False)
```

```{python}
wbdi_CA.head()
```

## code for cleaning ACLED (Juan)

```{python}
### ACLED import (simplified so only 1 line is needed to be changed)


acled = pd.read_csv('ACLED_2017-2024-Q1-QTA.csv')

# Subset by Central American countries
acled_CA = acled[acled["region"] == "Central America"]

# Subset by relevant variables
acled_columns = ["event_id_cnty", "event_date", "event_type", 
           "sub_event_type", "actor1", "actor2", 
           "inter1", "inter2", "interaction", 
           "country", "admin1", "latitude", 
           "longitude", "geo_precision", "notes"]

# Create a new csv
# acled_CA.to_csv('acled_project_data_cleaned.csv', index=False)
```

Countries: 
(['Belize', 'Costa Rica', 'El Salvador', 'Guatemala', 'Honduras',
       'Mexico', 'Nicaragua', 'Panama'], dtype=object)



       I have a column for country, name, and code, and each year is a separate column, each variable is a . 
       I want to groupby such that there is a year column, a name column, a code column, a country column

## Will Code: Inital Visualizations and merging. 

## First, Lets look at the columns and how many NAs are in each df

```{python}
print(wbdi_CA.columns)


# Check for missing values
print(wbdi_CA.isnull().sum())

```


```{python}
print(wbcm_pv.columns)

print(wbcm_pv.isnull().sum())

```


```{python}
print(acled_CA.columns)
print(acled_CA.isnull().sum())

```

## Now Lets do some summary statistics by each country for EDA, before we merge them




#Rename Columns for merges and such

```{python}
wbdi_CA.rename(columns={'country': 'Country', 'date': 'Year'}, inplace=True)
wbcm_pv.rename(columns={'Country': 'Country', 'Year': 'Year'}, inplace=True)
acled_CA.rename(columns={'country': 'Country', 'year': 'Year'}, inplace=True)
```

```{python}
acled_CA['Year'] = pd.to_numeric(acled_CA['Year'], errors='coerce', downcast='integer')
print(acled_CA['Year'].head())
```

```{python}
acled_CA['Year'] = pd.to_datetime(acled_CA['event_date'], errors='coerce').dt.year


wbdi_CA['Year'] = pd.to_datetime(wbdi_CA['Year'], errors='coerce')


```

## Now Lets do some summary statistics by each country for EDA, before we merge them


```{python}
# Basic statistics by country
wbdi_summary = wbdi_CA.groupby('Country').mean()
print(wbdi_summary)

# Identify indicators with the most missing values
nonmissing_wbdi = wbdi_CA.isnull().sum().sort_values(ascending=True)
print("Top indicators in WBDI:\n", nonmissing_wbdi.head(10))
```

## Looking at Political Stability Overtime
```{python}
## Political Stability
alt.Chart(wbdi_CA).mark_line().encode(
    x=alt.X('Year:T', title='Year'),
    y=alt.Y('political_stability_estimate', title='Political Stability by Year'),
    color='Country:N',
    tooltip=['Country', 'Year', 'political_stability_estimate']
).properties(
    title='Political Stability Country'
)

```


```{python}
# Filter out Mexico
filtered_data = wbdi_CA[wbdi_CA['Country'] != 'Mexico']

# Plot GDP per Capita Over Time without Mexico
alt.Chart(filtered_data).mark_line().encode(
    x=alt.X('Year:T', title='Year'),
    y=alt.Y('GDP_current_US:Q', title='GDP (Current US$)'),
    color='Country:N',
    tooltip=['Country', 'Year', 'GDP_current_US']
)
```


```{python}
#Homicide Rates
alt.Chart(wbdi_CA).mark_line().encode(
    x=alt.X('Year:T', title='Year'),
    y=alt.Y('intentional_homicides:Q', title='Homicide Rate (Total)'),
    color='Country:N',
    tooltip=['Country', 'Year', 'intentional_homicides']
)

#Notice Large Drop in Homicide Rates in El Salvador
```


## Make a Corr Plot of development Indicators
```{python}
# Select a subset of indicators
selected_indicators = wbdi_CA[[
    'GDP_current_US',
    'population',
    'life_expectancy_at_birth',
    'access_to_electricity%',
    'inflation_annual%',
    'gini_index',
    'human_capital_index',
    'intentional_homicides'
]]

# Drop rows with missing values
selected_indicators = selected_indicators.dropna()

# Compute the correlation matrix
corr_matrix = selected_indicators.corr()

# Reset index for Altair
corr_matrix = corr_matrix.reset_index().melt('index')

# Create the correlation heatmap
corr_heatmap = alt.Chart(corr_matrix).mark_rect().encode(
    x=alt.X('index:N', title='Indicator'),
    y=alt.Y('variable:N', title='Indicator'),
    color=alt.Color('value:Q', scale=alt.Scale(scheme='redblue', domain=(-1, 1))),
    tooltip=['index:N', 'variable:N', 'value:Q']
).properties(
    title='Correlation Matrix of Development Indicators',
    width=400,
    height=400
)

corr_heatmap.display()
```


```{python}
import pandas as pd
import geopandas as gpd
import folium
from folium.plugins import MarkerCluster
from shapely.geometry import Point

```


```{python}
# Ensure latitude and longitude column names are correct
latitude_column = 'latitude'
longitude_column = 'longitude'

# Create geometry for the GeoDataFrame
geometry = [Point(xy) for xy in zip(acled_CA[longitude_column], acled_CA[latitude_column])]
acled_gdf = gpd.GeoDataFrame(acled_CA, geometry=geometry, crs='EPSG:4326')

```

```{python}
shapefile_path = '/Users/willsigal/Desktop/UChicago/Fall 2025/Python Final/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp'

latin_america = gpd.read_file(shapefile_path)
countries_in_data = acled_CA['Country'].unique()
latin_america = latin_america[latin_america['ADMIN'].isin(countries_in_data)]
latin_america = latin_america.to_crs(epsg=3857)

event_types = acled_gdf['event_type'].unique()
num_event_types = len(event_types)
```


## Interactive Maps of Violence by Year
```{python}
#def create_interactive_map(acled_data, shapefile, year):
    # Filter data for the specific year
    #yearly_data = acled_data[acled_data['Year'] == year]
    
    # Initialize the map centered around Latin America
    m = folium.Map(location=[0, -70], zoom_start=3, tiles='OpenStreetMap')
    
    # Add country boundaries
    folium.GeoJson(
        shapefile.to_crs(epsg=4326),
        style_function=lambda x: {'fillColor': 'white', 'color': 'black', 'weight': 1, 'fillOpacity': 0.1}
    ).add_to(m)
    
    # Create a marker cluster
    marker_cluster = MarkerCluster().add_to(m)
    
    # Loop through the data and add markers
    for idx, row in yearly_data.iterrows():
        # Prepare the tooltip content
        tooltip_content = (
            f"<b>Event Type:</b> {row['event_type']}<br>"
            f"<b>Date:</b> {row['event_date']}<br>"
            f"<b>Location:</b> {row.get('admin1', 'N/A')}, {row['Country']}<br>"
            f"<b>Notes:</b> {row.get('notes', 'N/A')}"
        )
        
        # Determine marker color based on event type
        if row['event_type'] == 'Violence against civilians':
            marker_color = 'red'
        elif row['event_type'] == 'Protests':
            marker_color = 'blue'
        elif row['event_type'] == 'Riots':
            marker_color = 'purple'
        else:
            marker_color = 'green'
        
        # Add marker to the cluster
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            tooltip=tooltip_content,
            icon=folium.Icon(color=marker_color, icon='info-sign')
        ).add_to(marker_cluster)
    
    # Save the map to an HTML file
    map_filename = f'violent_events_map_{year}.html'
    m.save(map_filename)
    print(f"Interactive map for {year} saved as {map_filename}.")

# Create interactive maps for each year
years = sorted(acled_CA['Year'].unique())
for year in years:
   # create_interactive_map(acled_CA, latin_america, year)
```



```{python}

# Plotting
fig, ax1 = plt.subplots(figsize=(10, 6))

color = 'tab:red'
ax1.set_xlabel('Year')
ax1.set_ylabel('Violent Events', color=color)
ax1.plot(violence_gdp_time['Year'], violence_gdp_time['Violent Events'], color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # Instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Average GDP (US$)', color=color)
ax2.plot(violence_gdp_time['Year'], violence_gdp_time['Average GDP'], color=color)
ax2.tick_params(axis='y', labelcolor=color)

plt.title('Violent Events and Average GDP Over Time')
fig.tight_layout()
plt.show()
```

## Looking at El Salvador

```{python}
wbdi_CA['Year'] = wbdi_CA['Year'].dt.year

print(wbdi_CA['Year'].head(10))
print(wbdi_CA['Year'].dtype)

```

```{python}
acled_CA['Year'] = acled_CA['Year'].astype(int)
wbdi_CA['Year'] = wbdi_CA['Year'].astype(int)

el_salvador_violence = acled_CA[acled_CA['Country'] == 'El Salvador']
el_salvador_gdp = wbdi_CA[wbdi_CA['Country'] == 'El Salvador']

# Group violence data by year
violence_per_year = el_salvador_violence.groupby('Year').size().reset_index(name='Violent Events')

# Group GDP data by year
avg_gdp_per_year = el_salvador_gdp.groupby('Year')['GDP_current_US'].mean().reset_index(name='Average GDP')

# Merge on Year
violence_gdp_time = pd.merge(violence_per_year, avg_gdp_per_year, on='Year')

# Verify merged data
print(violence_gdp_time.head())
```

## Plotting 
```{python}
import altair as alt

# Altair plot for Violent Events and Average GDP
base = alt.Chart(violence_gdp_time).encode(
    x=alt.X('Year:O', title='Year')  # Treating Year as ordinal for cleaner spacing
)

# Line chart for Violent Events
line_violence = base.mark_line(color='red').encode(
    y=alt.Y('Violent Events:Q', title='Violent Events'),
    tooltip=['Year', 'Violent Events']
)

# Line chart for Average GDP
line_gdp = base.mark_line(color='blue').encode(
    y=alt.Y('Average GDP:Q', title='Average GDP (US$)', axis=alt.Axis(grid=False)),
    tooltip=['Year', 'Average GDP']
)

# Combine the two charts
el_salv_chart = alt.layer(line_violence, line_gdp).resolve_scale(
    y='independent'  # Ensure each Y-axis is independent
).properties(
    title='Violent Events and Average GDP in El Salvador Over Time',
    width=600,
    height=400
)

el_salv_chart
```